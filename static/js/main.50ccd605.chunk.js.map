{"version":3,"sources":["components/Header.js","components/BirthdayLogsForm.js","components/BirthdayLogs.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","BirthdayLogsForm","createBirthdayLog","state","person","day","firebase","ref","push","evt","key","this","setState","target","value","htmlFor","type","id","name","onChange","onChangeHandler","onClick","Component","BirthdayLogs","removeBirthdayLog","child","remove","birthdayLogs","map","birthdayLog","App","listenForChange","db","on","snapshot","val","filter","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.50ccd605.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = props => (\n    <header className=\"header\">\n\n        <h3 className=\"title\">Birthday<span>X</span>Log</h3>\n\n    </header>\n);\n\nexport default Header;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\n\nclass BirthdayLogsForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            person: '',\n            day: ''\n        }\n    }\n\n    onChangeHandler(evt, key) {\n        this.setState({\n            [key]: evt.target.value\n\n        })\n    }\n\n    createBirthdayLog = () => {\n\n        if (this.state.person !== \"\" && this.state.day !== \"\") {\n\n            firebase.database().ref('birthdayLogs').push({\n                person: this.state.person,\n                day: this.state.day\n            })\n\n        }\n\n    }\n\n\n    render() {\n        return (\n            <section className=\"birthdayLogForm\">\n                <h3>\n                    Create New Log\n                </h3>\n                <div className=\"form-group\">\n                    <label htmlFor=\"birthdayLogForm-person\">Name</label>\n                    <input\n                        type=\"text\"\n                        id=\"birthdayLogForm-person\"\n                        name=\"birthdayLogForm-person\"\n                        value={this.state.person}\n                        onChange={(evt) => this.onChangeHandler(evt, 'person')} />\n\n                </div>\n                <div className=\"form-group\">\n\n                    <label htmlFor=\"birthdayLogForm-day\">date</label>\n                    <input\n                        type=\"text\"\n                        id=\"birthdayLogForm-day\"\n                        name=\"birthdayLogForm-day\"\n                        value={this.state.day}\n                        onChange={(evt) => this.onChangeHandler(evt, 'day')} />\n                </div>\n                <button onClick={this.createBirthdayLog}>Enter Birthday</button>\n            </section>\n        )\n    }\n}\n\nexport default BirthdayLogsForm;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\n\nclass BirthdayLogs extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    removeBirthdayLog = (id) => {\n\n        firebase.database().ref('birthdayLogs').child(id).remove();\n\n    }\n    render() {\n        return (\n            <section className=\"birthdayLogs-wrapper\">\n                <h3>BirthdayLogs</h3>\n                <div className=\"birthdayLogs\">\n                    {this.props.birthdayLogs.map(birthdayLog => (\n                        <div className=\"birthdayLog\" key={birthdayLog.id}>\n                            <div className=\"birthdayLog-person\">\n                                <h3>{birthdayLog.person}</h3>\n                                <div className=\"remove\" onClick={() => this.removeBirthdayLog(birthdayLog.id)}>X</div>\n                            </div>\n                            <div className=\"birthdayLog-content\">\n                                <p>{birthdayLog.day}</p>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </section>\n        )\n    }\n}\nexport default BirthdayLogs;","import React, { Component } from 'react';\nimport * as firebase from 'firebase';\n\nimport Header from './components/Header';\nimport BirthdayLogsForm from './components/BirthdayLogsForm';\nimport BirthdayLogs from './components/BirthdayLogs';\n\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      birthdayLogs: []\n    }\n  }\n\n  componentDidMount() {\n    this.db = firebase.database();\n    this.listenForChange();\n\n  }\n\n  listenForChange = () => {\n    this.db.ref('birthdayLogs').on('child_added', snapshot => {\n      let birthdayLog = {\n        id: snapshot.key,\n        person: snapshot.val().person,\n        day: snapshot.val().day\n      }\n      let birthdayLogs = this.state.birthdayLogs;\n      birthdayLogs.push(birthdayLog);\n\n      this.setState({\n        birthdayLogs: birthdayLogs\n\n      });\n\n    });\n\n    this.db.ref('birthdayLogs').on('child_removed', snapshot => {\n\n      let birthdayLogs = this.state.birthdayLogs;\n      birthdayLogs = birthdayLogs.filter(birthdayLog => birthdayLog.id !== snapshot.key);\n\n\n\n      this.setState({\n        birthdayLogs: birthdayLogs\n\n      });\n\n    });\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Header />\n        <main>\n\n          <BirthdayLogsForm />\n          <BirthdayLogs birthdayLogs={this.state.birthdayLogs} />\n\n        </main>\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCHVOoelOXCpEJrjGTrfTD-ORGYe6XV-ak\",\n    authDomain: \"project-five-birthday-log.firebaseapp.com\",\n    databaseURL: \"https://project-five-birthday-log.firebaseio.com\",\n    projectId: \"project-five-birthday-log\",\n    storageBucket: \"project-five-birthday-log.appspot.com\",\n    messagingSenderId: \"1016230114805\",\n    appId: \"1:1016230114805:web:794ab14fa3c50058141cbc\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}